będą 3 tablice 8x8 zawierające wartości True oraz False

tablica 1 : Wszystkie wolne miejsca na mapie == False , Wszystkie zajęte miejsca na mapie == True

tablica 2 : w miejscach w których są sojusznicy True, wrogowie false. 
tablica 2(inna opcja) - Bazując na koordynatach pionka na którym jest teraz focus sprawdź gdzie można skoczyć "Za" przeciwnika. Jeżeli pójdziesz na wartość false 
to przeciwnik który znajdował się między pozycją początkową pionka a docelową zostaje zniszczony.
tablica 3: decyduje gdzie pionek może się poruszyć. [ Wymaga danych z tablicy nr 1]. Ta tablica mówi, że nie wolno się poruszać w miejsca oddalone o 2 od pionka, tam gdzie jest 
ściana, oraz tam gdzie są jakiekolwiek inne pionki. JEŻELI TABLICA 2(Inna opcja) mówi, że można się poruszyć w jakieś miejsce, to mimo tego, że wg tablicy 3 nie można się tam
przesunąć to i tak można się tam przesunąć.

--------------------------------------------------------------
w trakcie pisania tego powyżej doszedłem do wniosku, że chyba jednak jest potrzebnie 5 tablic (zostawiam tekst powyżej bo dokładniej wyjasnia kocept dotyczacy tablic)

1: Pozycje pionków
2: Przynależność pionków:
3. Możliwe ruchy pionka ( o 1 od miejsca w którym stoi, tylko do przodu) 
4. Możliwe miejsca ataku ( możliwa do obliczenia jeżeli masz pozycja pionka + pozycja wrogich pionków). Ta tablica ma wyższy priorytet od innych tablic.
5. Sumująca tablica [ sumuje wartości z [1,3] oraz nadpisuje je tablicą numer 4.

__________________________________
a może tablica nr 5 nie powinna być True False. i np 
zajete miejsca = 0
wolne miejsca = 1
wolne miejsca, ale atakujące ( te z tablicy nr 4) = 2

____________________________________
szybkie sumowanie bootleanow 
https://stackoverflow.com/questions/63446201/fast-way-to-do-a-boolean-check-between-two-lists-in-list-comprehension-in-python
[l1[i] or l2[i] for i in range(len(l1))]
____________________________________________
warto robić historię ruchów za pomocą tablicy 1 i 2?
jestem w stanie jakoś takie dane podać?
bo jedna zapisana rozgrywka to pewnie z 50 tablic 8x8
gdzie jedna tablica to jedno 8x8 z informacją o pozycji sojusniczych i wrogich pionków
____________________________________________

https://stackoverflow.com/questions/13614452/python-multidimensional-boolean-array

_____________________________________

Jak ai będzie zmieniać wartości w tablicy:

będzie pętla, które przechodzi przez wszystkie wartości w checkers po kolei i kiedy wpadnie na tą którą chce zmienić to
w def ()
  bla bla bla
  bla
  bla
  zmień wartość globalną ( bo chyba tylko tak się da zmieniać wartości spoza funkcji za pomocą funkcj, 
  lub to może będzie poprostu szybsze od innych sposobów.

_______________________________________



Tip for learning Patterns over Syntax - Try watching a tutorial in a language that you are not learning. For instance, if you're learning python, watch a tutorial for a project in java or c#. This way you'll get the over all logic for the project, but won't be able to just copy/paste code. In other words, you'll be forced to figure out the problem in the language you are working in. You will use different libraries and syntax, but the logic itself will be similar. Keep in mind this only works for tutorials that are about a specific project. I've done this myself a few times, and have always found it to be a rewarding way to spend an afternoon.

przykład: https://www.youtube.com/watch?v=FAQmCAQ1s80


____________________________________

Myślę, że użyjemy uczenia maszynowego pod nadzorem, ale to pod jakim konkretnie nadzorem to trzeba popatrzeć na czyjeś projekty, jest to pierwszy średni/mały projekt więc nie rozwijałbym za bardzo analizy AI, tylko postrał się jak najszybciej osiągnąć działający produkt, a następnie jeżeli wciąż będzie motywacja, to go rozwijać.

__________________________________________________________________________

Plan: Skrócić maksymalnie czas, w którym otrzymamy pierwszy prototyp szachów (bez AI).
Dzięki temu będziemy w stanie szybciej zobaczyć jakie napotkamy problemy, oraz usuwanie kodu nie będzie bolesne.


Obecny plan który wydaje mi się, że może mieć sens:

1. Szachy które da się przemieszczać po planszy w jakiś sposób (DONE)
2. Wprowadzić ograniczenia ruchu (ale tylko dla np: Królowa, Król, Pionki) ( IN PROGRESS )
3. Interface graficzny który wyświetla pozycję pionków (IN PROGRESS )
4. Pionki w intejsie graficznym powinny mieć funkcję drag and drop ! Oraz po zrobieniu drag and drop tablica z szachownicą powinna się zaktualizować 
5. Powinno rozróżniać graczów, oraz tylko gracz którego jest teraz tura może ruszać tylko SWOJE pionki
6. Sprawdzić jak będzie wyglądać integracja z AI
7. Poprawić rzeczy które uniemozliwiają integrację z AI
8. Dokończyć szachy oraz interface graficzny
9. Integracja z AI
10. Optymalizacja. 

_____________________
Code structure:
exploratory, just try new things and when you decide that you want to build code "this way:" then convert your project into that code structure

______________________________________

I suggest using simple machine learning. Let's leave neural network for later projects

____________________


We will use CNN architecture + RL (Reinforced learning)
_____

Evaluating the quality of a chess position :

Material evaluation: This approach evaluates the position based on the relative value of the pieces on the board. The value of each piece is assigned a fixed value, and the evaluation function simply adds up the values of the pieces to get a total score.

____


color_board = [[1, 1, 1, 1, 1, 1, 1, 1],
               [1, 1, 1, 1, 1, 1, 1, 1],
               [0, 0, 0, 0, 0, 0, 0, 0],
               [0, 0, 0, 0, 0, 0, 0, 0],
               [0, 0, 0, 0, 0, 0, 0, 0],
               [0, 0, 0, 0, 0, 0, 0, 0],
               [2, 2, 2, 2, 2, 2, 2, 2],
               [2, 2, 2, 2, 2, 2, 2, 2]]
               
type_board = [[1, 2, 3, 4, 5, 6, 2, 1],
              [7, 7, 7, 7, 7, 7, 7, 7],
              [0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0],
              [7, 7, 7, 7, 7, 7, 7, 7],
              [1, 2, 3, 4, 5, 6, 2, 1]]         
  _________________________________________
  
  GUI IDEAS SUMMARISATION:
 - Focus on just writing chess, optimalisation will come later.
 - Modularization [GUI] [Game logic (all pieces rules)] [Game logic (specific chess type rules) [AI] [Image database]
 - Apply Drag and drop for chess pieces
 - Create class / method that will corelate Virtual board with pygame drawn board.
 
 ________________________________
 
 Maybe each piece should send information about its position????? Stupid idea?
 
 
